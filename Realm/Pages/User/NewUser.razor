@page "/newuser"
@using Realm.Data.Models
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<AppUser> UserManager
@inject NavigationManager NavigationManager

<h3>Create New User</h3>

<EditForm Model="userModel" OnValidSubmit="CreateUser">
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="userModel.UserName" />
        <ValidationMessage For="@(() => userModel.UserName)" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="userModel.Email" />
        <ValidationMessage For="@(() => userModel.Email)" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" @bind-Value="userModel.Password" type="password" />
        <ValidationMessage For="@(() => userModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Create User</button>
</EditForm>

@code {
    private CreateUserModel userModel = new CreateUserModel();

    private async Task CreateUser()
    {
        if (userModel.IsValid())
        {
            var user = new AppUser
            {
                UserName = userModel.UserName,
                Email = userModel.Email
            };

            var result = await UserManager.CreateAsync(user, userModel.Password);

            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/userlist");
            }
            else
            {
                // Handle user creation failure
            }
        }
    }

    public class CreateUserModel
    {
        [Required(ErrorMessage = "Please enter a username.")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Please enter an email address.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Please enter a password.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; }

        public bool IsValid()
        {
            return !string.IsNullOrEmpty(UserName)
                && !string.IsNullOrEmpty(Email)
                && !string.IsNullOrEmpty(Password);
        }
    }
}
